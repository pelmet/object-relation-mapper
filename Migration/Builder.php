<?php

namespace ObjectRelationMapper\Migration;

class Builder
{
    /**
     * @var \ObjectRelationMapper\Connector\IConnector $connector
     */
    protected $connector;

    protected $linesUp;
    protected $linesDown;

    protected $computed = false;

    protected $result;

    protected $migrationTemplate = <<<EOF
    
<?php

use Phinx\Migration\AbstractMigration;

class %s extends AbstractMigration
{
    public function up()
    {
%s
    }
    
    public function down()
    {
%s
    }
}


EOF;

    protected $addColumnTemplate = <<<EOF
        \$table->addColumn('%s', '%s', array('limit' => %s));
EOF;

    protected $removeColumnTemplate = <<<EOF
        \$table->removeColumn('%s');
EOF;

    protected $createTableTemplate = <<<EOF
        \$table = \$this->table('%s', array('id' => false, 'primary_key' => '%s', 'collation' => 'utf8_unicode_ci'));
EOF;

    protected $dropTableTemplate = <<<EOF
        \$this->dropTable('%s');
EOF;

    protected $tableTemplate = <<<EOF
        \$table = \$this->table('%s');
EOF;

    protected $saveTableTemplate = <<<EOF
        \$table->save();
EOF;



    /**
     * @var \ObjectRelationMapper\Base\AORM
     */
    protected $orm;

    /**
     * @var boolean
     */
    protected $ormBase;

    public function __construct()
    {
        $this->setORMBase();
    }

    public function setORMBase()
    {
        $this->ormBase = true;
    }

    public function addORMToWatch(\ObjectRelationMapper\Base\AORM $orm)
    {
        $this->orm[$orm->getConfigObject()] = $orm;
    }

    protected function diff()
    {
        $linesUp = Array();
        $linesDown = Array();
        $this->computed = true;

        /**
         * @var $object \ObjectRelationMapper\Base\AORM
         */
        foreach($this->orm as $objectName => $object){
            $translatedCols = Array();

            /**
             * @var $column \ObjectRelationMapper\ColumnType\AColumn
             */
            foreach($object->getColumns() as $columnName => $column){
                $translatedCols[$column->col] = $column;
            }

            if($this->ormBase){
                $describe = $object->getQueryBuilder()->describe($object);
                $diff = array_diff_key($translatedCols, $describe);

                if(empty($diff)){
                    continue;
                }

                if(empty($describe)){
                    //tabulka vubec neexistuje
                    $linesUp[] = sprintf($this->createTableTemplate, $object->getConfigDbTable(), $object->getConfigDbPrimaryKey());
                    $linesDown[] = sprintf($this->dropTableTemplate, $object->getConfigDbTable());

                    foreach($diff as $missingColumn){
                        $linesUp[] = sprintf($this->addColumnTemplate, $missingColumn->col, $missingColumn->generateDbLine(), $missingColumn->length);
                    }

                    $linesUp[] = sprintf($this->saveTableTemplate);

                } else {
                    $linesUp[] = sprintf($this->tableTemplate, $object->getConfigDbTable());
                    $linesDown[] = sprintf($this->tableTemplate, $object->getConfigDbTable());

                    foreach($diff as $missingColumn){
                        $linesUp[] = sprintf($this->addColumnTemplate, $missingColumn->col, $missingColumn->generateDbLine(), $missingColumn->length);
                        $linesDown[] = sprintf($this->removeColumnTemplate, $missingColumn->col);
                    }

                    $linesUp[] = sprintf($this->saveTableTemplate);
                    $linesDown[] = sprintf($this->saveTableTemplate);
                }

                $linesUp[] = '';
                $linesDown[] = '';

            } else {
                // DB ma pravdu
                throw new \Exception('Not yet implemented');
            }
        }

        $this->linesUp = $linesUp;
        $this->linesDown = $linesDown;

        $this->result = sprintf($this->migrationTemplate, 'AutoGeneratedMigration', join("\n", $linesUp), join("\n", $linesDown));
    }

    public function areDifferent()
    {
        if(!$this->computed){
            $this->diff();
        }

        return !empty($this->linesUp) || !empty($linesDown);
    }

    public function getDiff()
    {
        if(!$this->computed){
            $this->diff();
        }

        return $this->result;
    }
}